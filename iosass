1-------------------------------------------Calculator---------------------------------------------------------

import UIKit

class ViewController: UIViewController {
    
    // MARK: - IBOutlets
    @IBOutlet var settingsForAllButtons: [UIButton]!
    @IBOutlet weak var resultLabel: UILabel!
    @IBOutlet weak var resultButton: UIButton!
    var number: String = ""
    var currentResult: String = ""

    override func viewDidLoad() {
        super.viewDidLoad()
        
        settingForAllButtons()
    }
    
    // UI settings for all buttons on screen
    private func settingForAllButtons() {
        settingsForAllButtons.forEach({ button in
            button.layer.cornerRadius = 38
        })
    }
    
    //MARK: - IBActions
    @IBAction func numbersButtons(_ sender: UIButton) {
       
        if resultLabel.text!.count < 15 {
            if sender.tag == 0 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "0"
            } else if sender.tag == 1 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "1"
            } else if sender.tag == 2 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "2"
            } else if sender.tag == 3 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "3"
            } else if sender.tag == 4 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "4"
            } else if sender.tag == 5 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "5"
            } else if sender.tag == 6 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "6"
            } else if sender.tag == 7 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "7"
            } else if sender.tag == 8 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "8"
            } else if sender.tag == 9 {
                if number.first == "0" {
                    number.removeFirst()
                }
                number += "9"
            }
            
            resultLabel.text = number
        } else {
            let alert = UIAlertController(title: "Ошибка", message: "Вы ввели слишком большое число!", preferredStyle: .alert)
            let action = UIAlertAction(title: "OK", style: .default)
            alert.addAction(action)
            self.present(alert, animated: true)
        }
    }
    
    @IBAction func deleteLastNumber(_ sender: UIButton) {
        
        if number != "" {
            number.removeLast()
        } else if number.count == 0 {
            let alert = UIAlertController(title: "Ошибка", message: "Введите цифры!", preferredStyle: .alert)
            let action = UIAlertAction(title: "OK", style: .default) { _ in
                self.resultLabel.text = "0"
            }
            alert.addAction(action)
            self.present(alert, animated: true)
        }
        
        resultLabel.text = number
    }
    
    @IBAction func deleteAll(_ sender: UIButton) {
        number.removeAll()
        resultLabel.text = "0"
        resultButton.titleLabel?.text = "0"
    }
    
    @IBAction func floatNumberButton(_ sender: UIButton) {
        number += "."
        resultLabel.text = number
    }
    
    @IBAction func percentButton(_ sender: UIButton) {
        if !number.isEmpty {
            addTwoNumbers(value: "%")
        } else {
            let alert = UIAlertController(title: "Ошибка", message: "Введите знак процента после числа!", preferredStyle: .alert)
            let action = UIAlertAction(title: "OK", style: .default)
            alert.addAction(action)
            self.present(alert, animated: true)
        }
    }
    
    @IBAction func resultButtonAction(_ sender: UIButton) {
        resultLabel.text = currentResult
        number = currentResult
    }
    
    @IBAction func operations(_ sender: UIButton) {
        
        if sender.tag == 10 {
            devisionOnZero()
            if number == "" {
                number = "0"
            }
            if validInput() && validInputForMinus() && validInputForPercent() {
                let checkedWorkingsForPercent = number.replacingOccurrences(of: "%", with: "*0.01")
                let expression = NSExpression(format: checkedWorkingsForPercent)
                let result = expression.expressionValue(with: nil, context: nil) as! Double
                let resultString = formatResult(result: result)
                currentResult = resultString
                resultButton.titleLabel?.text = resultString
            } else {
                let alert = UIAlertController(title: "Ошибка", message: "Неправильно введенные символы", preferredStyle: .alert)
                let action = UIAlertAction(title: "OK", style: .default) { _ in
                    self.number = ""
                    self.resultLabel.text = "0"
                }
                alert.addAction(action)
                self.present(alert, animated: true)
            }
        } else if sender.tag == 11 {
            addTwoNumbers(value: "+")
        } else if sender.tag == 12 {
            addTwoNumbers(value: "-")
        } else if sender.tag == 13 {
            addTwoNumbers(value: "*")
        } else if sender.tag == 14 {
            addTwoNumbers(value: "/")
        }
    }
    
    // MARK: Functions
    func validInput() -> Bool {
        var count = 0
        var charIndexes = [Int]()
        var previous: Int = -1
        
        for char in number {
            if specialCharacter(char: char) {
                charIndexes.append(count)
            }
            count += 1
        }
        
        for index in charIndexes {
            if index == 0 {
                return false
            } else if (index == number.count - 1) {
                return false
            } else if previous != -1 {
                if index - previous == 1 {
                    return false
                }
            }
            previous = index
        }
        return true
    }
    
    func validInputForMinus() -> Bool {
        if number.last == "-" {
            return false
        }
        return true
    }
    
    func validInputForPercent() -> Bool {
        if number.contains("%+%") {
            return false
        } else if number.contains("%-%") {
            return false
        } else if number.contains("%/%") {
            return false
        } else if number.contains("%*%") {
            return false
        }
        return true
    }
    
    func specialCharacter(char: Character) -> Bool {
        if char == "*" {
            return true
        } else if char == "/" {
            return true
        } else if char == "+" {
            return true
        } else if char == "." {
            return true
        }
        return false
    }
    
    func addTwoNumbers(value: String)  {
        number = number + value
        resultLabel.text = number
    }
    
    func devisionOnZero() {
        if number.contains("/0") {
            let alert = UIAlertController(title: "Ошибка", message: "На ноль делить нельзя!", preferredStyle: .alert)
            let action = UIAlertAction(title: "OK", style: .default) { _ in
                self.number = ""
                self.resultLabel.text = "0"
            }
            alert.addAction(action)
            self.present(alert, animated: true)
        }
    }
    
    func formatResult(result: Double) -> String {
        if result.truncatingRemainder(dividingBy: 1) == 0 {
            return String(format: "%.0f", result)
        } else {
            return String(format: "%.2f", result)
        }
    }
}




-----------------------------------------------------------------------------------------------------


VIEW CONTROLLER
=============

import UIKit
private let maxGrid = 10
private let minGrid = 3

class ViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {

    @IBOutlet weak var picketControl: UIPickerView!
    @IBOutlet weak var p1TextField: UITextField!
    @IBOutlet weak var p2TextField: UITextField!
    override func viewDidLoad() {
        super.viewDidLoad()
        self.edgesForExtendedLayout = []
        self.title = "TicTacToe"
        picketControl.dataSource = self
        picketControl.delegate = self
        
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(self.tappedOnView(_:)))
        self.view.addGestureRecognizer(tapGesture)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        NotificationCenter.default.addObserver(self, selector: #selector(ViewController.keyboardWillShow), name: NSNotification.Name.UIKeyboardWillShow, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(ViewController.keyboardWillHide), name: NSNotification.Name.UIKeyboardWillHide, object: nil)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillAppear(animated)
        NotificationCenter.default.removeObserver(self, name: NSNotification.Name.UIKeyboardWillShow, object: self.view.window)
        NotificationCenter.default.removeObserver(self, name: NSNotification.Name.UIKeyboardWillHide, object: self.view.window)
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func tappedOnView(_ sender: UITapGestureRecognizer) {
        print("Please Help!")
        p1TextField.resignFirstResponder()
        p2TextField.resignFirstResponder()
    }
    
    func keyboardWillShow(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            if self.view.frame.origin.y == 64{
                let offset = (self.view.frame.size.height - p2TextField.frame.origin.y - p2TextField.frame.size.height) - keyboardSize.height
                self.view.frame.origin.y -= offset
            }
        }
    }
    
    func keyboardWillHide(notification: NSNotification) {
        if let keyboardSize = (notification.userInfo?[UIKeyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            let offset = (self.view.frame.size.height - p2TextField.frame.origin.y - p2TextField.frame.size.height) - keyboardSize.height
            if self.view.frame.origin.y != 64{
                self.view.frame.origin.y += offset
            }
        }
    }
    
    @IBAction func startTheGame(_ sender: Any) {
        let controller = storyboard!.instantiateViewController(withIdentifier: "GameViewController") as! GameViewController
        controller.gameNumber = CGFloat(minGrid)+CGFloat(picketControl.selectedRow(inComponent: 0))
        if p1TextField.text != nil {
            controller.player1.playerName = p1TextField.text!
        }
        if p2TextField.text != nil {
            controller.player2.playerName = p2TextField.text!
        }
        
        navigationController?.pushViewController(controller, animated: true)
    }
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return maxGrid - minGrid + 1
    }
    
    func pickerView(_ pickerView: UIPickerView, attributedTitleForRow row: Int, forComponent component: Int) -> NSAttributedString? {
        let string = String(minGrid+row)
        return NSAttributedString(string: string, attributes: [NSForegroundColorAttributeName:UIColor.white])
    }
}



===============
GAME VIEW CONTROLLER
===============

import UIKit
private let gameReuseIdentifier = "gameReuseIdentifier"



class GameViewController: UIViewController, UICollectionViewDataSource,UICollectionViewDelegate, UICollectionViewDelegateFlowLayout, UIScrollViewDelegate {
    
    enum Planet: Int {
        case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
    }
    
    struct Player {
        var playerName = ""
        var playerId = 1
        var isHisTurn = false
        var didHeWin = false
        var positions:[IndexPath] = []
    }
    
    var gameNumber: CGFloat = 3
    var player1 = Player()
    var player2 = Player()
    
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var gameCollectionView: UICollectionView!
    override func viewDidLoad() {
        super.viewDidLoad()
        
        //Initial Setup
        if player1.playerName == "" {
            player1.playerName = "Player 1"
        }
        player1.isHisTurn = true
        titleLabel.text = player1.playerName+"'s Turn"
        player1.playerId = 1
        
        if player2.playerName == "" {
            player2.playerName = "Player 2"
        }
        player2.isHisTurn = false
        player2.playerId = 2
        
        let flowLayout = UICollectionViewFlowLayout()
        flowLayout.minimumInteritemSpacing = 0
        flowLayout.minimumLineSpacing = 0
        flowLayout.sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        flowLayout.scrollDirection = UICollectionViewScrollDirection.vertical
        
        gameCollectionView.delegate = self
        gameCollectionView.dataSource = self
        gameCollectionView.collectionViewLayout = flowLayout
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return Int(gameNumber)
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return Int(gameNumber)
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
    {
        let cell  = gameCollectionView.dequeueReusableCell(withReuseIdentifier: gameReuseIdentifier, for: indexPath) as! GameCollectionViewCell
        cell.layer.borderWidth = 2.0
        cell.layer.borderColor = UIColor.white.cgColor
        cell.cellLabel.text = ""
        cell.playerId = 0
        
        let bottomOffset = CGPoint(x: 0, y: gameCollectionView.contentSize.height - gameCollectionView.bounds.size.height)
        gameCollectionView.setContentOffset(bottomOffset, animated: false)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let cell = collectionView.cellForItem(at: indexPath) as! GameCollectionViewCell
        if cell.cellLabel.text == "" {
            if player1.isHisTurn {
                cell.cellLabel.text = "O"
                cell.cellLabel.font = UIFont.systemFont(ofSize: cell.cellLabel.bounds.size.height)
                cell.playerId = player1.playerId
                player1.positions.append(indexPath)
                player1.isHisTurn = false
                player2.isHisTurn = true
            }else{
                cell.cellLabel.text = "X"
                cell.cellLabel.font = UIFont.systemFont(ofSize: cell.cellLabel.bounds.size.height)
                player2.positions.append(indexPath)
                player2.isHisTurn = false
                player1.isHisTurn = true
                cell.playerId = player2.playerId
            }
            checkResultForCollectionView(collectionVW: collectionView)
            updateView()
        }
        if player1.positions.count + player2.positions.count ==  Int(gameNumber)*Int(gameNumber){
            if !player1.didHeWin && !player2.didHeWin{
                showAlertViewWith(message: "It's a Tie")
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView,
                        layout collectionViewLayout: UICollectionViewLayout,
                        sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: (collectionView.bounds.width - 10) / gameNumber, height: (collectionView.bounds.size.height - 10) / gameNumber)
    }
    
    func updateView(){
        if player1.didHeWin {
            showAlertViewWith(message: player1.playerName+" Won!!")
        }else if player2.didHeWin {
            showAlertViewWith(message: player2.playerName+" Won!!")
        }else{
            if player1.isHisTurn {
                titleLabel.text = player1.playerName+"'s Turn"
            }else{
                titleLabel.text = player2.playerName+"'s Turn"
            }
        }
    }
    
    func checkResultForCollectionView(collectionVW: UICollectionView){
        var resultP1 = true
        var resultP2 = true
        
        //Horizontal Check
        for column in 0...Int(gameNumber-1){
            for row in 0...Int(gameNumber-1) {
                let cell = collectionVW.cellForItem(at: IndexPath.init(row: row, section: column)) as! GameCollectionViewCell
                if cell.playerId != player1.playerId{
                    resultP1 = false
                }
                if cell.playerId != player2.playerId{
                    resultP2 = false
                }
            }
            if resultP1{
                player1.didHeWin = true
                return
            }else if resultP2{
                player2.didHeWin = true
                return
            }else{
                resultP1 = true
                resultP2 = true
            }
        }

        //Vertical Check
        for row in 0...Int(gameNumber-1){
            for column in 0...Int(gameNumber-1) {
                let cell = collectionVW.cellForItem(at: IndexPath.init(row: row, section: column)) as! GameCollectionViewCell
                if cell.playerId != player1.playerId{
                    resultP1 = false
                }
                if cell.playerId != player2.playerId{
                    resultP2 = false
                }
            }
            if resultP1{
                player1.didHeWin = true
                return
            }else if resultP2{
                player2.didHeWin = true
                return
            }else{
                resultP1 = true
                resultP2 = true
            }
        }
        
        //Right Diagonal Check
        for row in 0...Int(gameNumber-1){
            let cell = collectionVW.cellForItem(at: IndexPath.init(row: row, section: row)) as! GameCollectionViewCell
            if cell.playerId != player1.playerId{
                resultP1 = false
            }
            if cell.playerId != player2.playerId{
                resultP2 = false
            }
        }
        if resultP1{
            player1.didHeWin = true
            return
        }else if resultP2{
            player2.didHeWin = true
            return
        }else{
            resultP1 = true
            resultP2 = true
        }
        
        //Left Diagonal Check
        for row in 0...Int(gameNumber-1){
            let cell = collectionVW.cellForItem(at: IndexPath.init(row: row, section: Int(gameNumber-1) - row)) as! GameCollectionViewCell
            if cell.playerId != player1.playerId{
                resultP1 = false
            }
            if cell.playerId != player2.playerId{
                resultP2 = false
            }
        }
        if resultP1{
            player1.didHeWin = true
            return
        }else if resultP2{
            player2.didHeWin = true
            return
        }else{
            resultP1 = true
            resultP2 = true
        }
    }
    
    func showAlertViewWith(message: String){
        let alert = UIAlertController(title: "Game Over", message: message, preferredStyle: UIAlertControllerStyle.alert)
        alert.addAction(UIAlertAction(title: "Ok", style: UIAlertActionStyle.default, handler: { action in
            self.reloadGame()
        }))
        self.present(alert, animated: true, completion: nil)
    }
    
    func reloadGame(){
        player1.isHisTurn = true
        player1.didHeWin = false
        player1.positions = []
        
        player2.isHisTurn = false
        player2.didHeWin = false
        player2.positions = []
        updateView()
        gameCollectionView.reloadData()
    }
}

===========
GAME COLLECTION VIEW CELL
=======


import UIKit

class GameCollectionViewCell: UICollectionViewCell {
    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var cellLabel: UILabel!
    var playerId: Int = 0
}


================================================================================================

ViewController.shift
-------------------------------------------

import UIKit

class ViewController: UIViewController {
    
    private let myTableview = UITableView()
    
    private var cityArray = [[String:Any] ]()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        cityArray.append(["State":"Assam","City":"Dispur"])
        cityArray.append(["State":"Bihar","City":"Patna"])
        cityArray.append(["State":"Assam","City":"Dispur"])
        cityArray.append(["State":"Goa","City":"Panaji"])
        cityArray.append(["State":"Gujarat","City":"Gandhinagar"])
        cityArray.append(["State":"Chhattisgarh","City":"Raipur"])
        cityArray.append(["State":"Punjab","City":"Chandigarh"])
        cityArray.append(["State":"Sikkim","City":"Gangtok"])
        cityArray.append(["State":"Nagaland","City":"Kohima"])
        cityArray.append(["State":"Tamil Nadu","City":"Hyderabad"])
        view.addSubview(myTableview)
        
        setupCell()
        
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        
        myTableview.frame = CGRect(x: 0, y: view.safeAreaInsets.top+30, width: view.width, height: view.height)
        
    }
    
    
}

extension ViewController : UITableViewDataSource,UITableViewDelegate{
    
    func setupCell(){
        myTableview.dataSource = self
        myTableview.delegate = self
        myTableview.register(CityCell.self, forCellReuseIdentifier: "CityCell")
        myTableview.rowHeight = 100
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
            return cityArray.count
        
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CityCell", for: indexPath) as! CityCell
        
           let state = cityArray[indexPath.row]["State"] as? String
            let city = cityArray[indexPath.row]["City"] as? String
             cell.setupCityCellWith(title: state!, discription: city!)
            
        
        return cell
    }
    
}

-----------------------------------------
Extension.swift
----------------------------------------

import Foundation
import UIKit

extension UIView {
    public var width: CGFloat { return frame.size.width }
    public var height: CGFloat { return frame.size.height }
    public var top: CGFloat { return frame.origin.y }
    public var bottom: CGFloat { return frame.origin.y + frame.size.height }
    public var left: CGFloat { return frame.origin.x }
    public var right: CGFloat { return frame.origin.x + frame.size.width }
}

-----------------------------------------
CityCell.swift
-----------------------------------------


import UIKit

class CityCell: UITableViewCell {
    
    
    private let title = UILabel()
    
    private let discription = UILabel()
    
    private func setupUI(){
       contentView.addSubview(title)
        contentView.addSubview(discription)
       
        title.frame = CGRect(x: 20, y: 10, width: contentView.width - 90, height: 40)
        title.font = title.font.withSize(30)
        discription.frame = CGRect(x: 20, y: title.bottom + 5, width: contentView.width - 90, height: 40)
        discription.font = discription.font.withSize(20)
    }
    
    func setupCityCellWith(title name:String, discription desc:String){
        title.text = name
        discription.text = desc
        setupUI()
    }
}

